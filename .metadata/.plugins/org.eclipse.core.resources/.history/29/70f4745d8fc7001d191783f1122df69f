package com.example.demo.controller;


import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.client.RestTemplate;

@Controller
@RequestMapping("/auth/*")
public class AuthController {
	Logger logger = LoggerFactory.getLogger(AuthController.class);
	
	@GetMapping("/kakao/callback")
	public String kakaoCallback(HttpSession session, String code){
		logger.info("kakaoCallback");
		// POST방식으로 key=value 데이터를 요청 (카카오쪽으로)
		// 이것을 위해 RestTemplate라이브러리가 있음
		RestTemplate rt = new RestTemplate();
		// HttpHeaders 객체 생성
		HttpHeaders headers = new HttpHeaders();
		headers.add("Content-type", "application/x-www-form-urlencoded;charset=utf-8");
		MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
		params.add("grant_type", "authorization_code");
		params.add("client_id", "bb3e54dd956391506045f66da53a5ff1");
		params.add("redirect_uri", "http://localhost:8000/auth/kakao/callback");
		params.add("code", code);
		// HttpHeader와 HttpBody를 하나의 오브젝트에 담기
		HttpEntity<MultiValueMap<String, String>> tokenRequest = new HttpEntity<>(params, headers);
		// Http요청하기 - Post방식으로 - 그리고 response 변수의 응답 받음
		ResponseEntity<String> response = rt.exchange("https://kauth.kakao.com/oauth/token", HttpMethod.POST,
				tokenRequest, String.class);
		logger.info(code);
		logger.info(response.getBody());
		return null;
	}
	
}
